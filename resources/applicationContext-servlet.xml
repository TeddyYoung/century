<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	
    <description>Spring MVC Configuration</description>
    
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:/config.properties" />
	
	<!-- 使用Annotation自动注册Bean,只扫描@Controller -->
	<context:component-scan base-package="com.sirdc.modules,com.century.modules" use-default-filters="false"><!-- base-package 如果多个，用“,”分隔 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
		    	<constructor-arg value="UTF-8" />
		    	<property name="supportedMediaTypes">
		    		<list>
		    			<value>text/html;charset=UTF-8</value>
		    			<value>text/plain;charset=UTF-8</value>
		    		</list>
		    	</property>
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出为true -->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="prettyPrint" value="true"/>
                <property name="objectMapper">  
                    <bean id="jsonMapper" class="com.sirdc.modules.util.JsonMapper"></bean>  
                </property> 
                <property name="supportedMediaTypes">
                	<list>
                		<value>application/json;charset=UTF-8</value>
                		<value>text/html;charset=UTF-8</value>
                	</list>
                </property>
            </bean>
            
            <!-- 注册xml输出信息 -->
            <bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
				<property name="marshaller">
					<bean class="org.springframework.oxm.xstream.XStreamMarshaller">
						<property name="streamDriver">
							<bean class="com.thoughtworks.xstream.io.xml.StaxDriver"></bean>
						</property>
					</bean>
				</property>
				<property name="supportedMediaTypes">
                	<list>
                		<value>application/xml;charset=UTF-8</value>
                	</list>
                </property>
			</bean>
		</mvc:message-converters>
		<mvc:argument-resolvers>
			<bean class="com.sirdc.modules.core.web.SecureModelAttributeMethodArgumentResolver">
				<constructor-arg value="false"/>
			</bean>
		</mvc:argument-resolvers>
	</mvc:annotation-driven>
	
    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
	    <property name="mediaTypes" >
	        <map>
	        	<entry key="html" value="text/html"/>
	        	<entry key="xml" value="application/xml"/>
                <entry key="json" value="application/json"/> 
            </map>
	    </property>
	    <!-- 这里是否忽略掉accept header，默认就是false -->
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="favorPathExtension" value="true"/>
	</bean>

	<!-- 视图文件解析配置 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="${web.view.prefix}"/>
		<property name="suffix" value="${web.view.suffix}"/>
	</bean>
	
	<!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler/>
	
	<!-- 定义无Controller的path<->view直接映射 -->
	<mvc:view-controller path="/" view-name="redirect:${web.view.index}"/>

	<!-- 拦截器配置 -->
	
	<mvc:interceptors>
		<bean class="com.sirdc.modules.interceptor.LogInterceptor" />
	</mvc:interceptors>
	
	<!-- 支持Shiro对Controller的方法级AOP安全控制 begin-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	
	<!-- 基于配置文件式的异常处理 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="exceptionMappings">  
            <props>  
                <prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop>
                <prop key="com.sirdc.modules.core.exceptions.ServiceException">error/503</prop>
            </props>  
        </property>  
    </bean>
    
    <!-- 基于注解式子的异常处理 -->
    <bean id="exceptionHandlerExceptionResolver" class="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"></bean>
	<!-- Shiro end -->
    
	<!-- 上传文件拦截，设置最大上传文件大小   10M=10*1024*1024(B)=10485760 bytes -->  
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <property name="maxUploadSize" value="${web.maxUploadSize}" />  
    </bean>
</beans>